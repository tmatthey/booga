/*
 * checkers.bsdl3
 *
 * Copyright (C) 1996, Thomas Teuscher<teuscher@iam.unibe.ch>
 *                     University of Berne, Switzerland
 *
 * All rights reserved.
 *
 * This software may be freely copied, modified, and redistributed
 * provided that this copyright notice is preserved on all copies.
 *
 * You may not distribute this software, in whole or in part, as part of
 * any commercial product without the express consent of the authors.
 *
 * There is no warranty or other guarantee of fitness of this software
 * for any purpose.  It is provided solely "as is".
 *
 * -----------------------------------------------------------------------------
 *  $Id: checkers.bsdl3,v 1.1 1996/06/06 11:49:10 streit Exp $
 * -----------------------------------------------------------------------------
 */

#ifndef _checkers_bsdl3
#define _checkers_bsdl3

// This example shows the difference between the 2D and the 3D checker
// function. Since we apply spherical mapping in the 2D case,
// it should be used with curved surfaces to avoid distortions.
// The 3D case, however, is not suitable for curved surfaces,
// but its strength lies in being applied to planes and objects
// with sharp edges.

using 3D;

camera {
  perspective {
  eye [7.5,0,2];
  lookat [0,0,0];
  resolution (200,200);
  fov(35);
  }
  background [.9,.9,.9];
};

pointLight (1, [1, 1, 1]) { position [120, 20, 100]; }

box ([0,0,0], [1.00001,1.00001,1.00001]) {
  shader("checker3D.bsl",4,4,4);
  rotateZ(-45);
  translate[0,1,-1.25];
}

box ([0,0,0], [1,1,1]) {
  shader("checker2D.bsl",16,8);
  rotateZ(-45);
  translate[0,-1,-1.25];
}

sphere (.75, [0,0,0]) {
  shader("checker2D.bsl",16,8);
  translate[0,-1,1];
}

sphere (.75, [0,0,0]) {
  shader("checker3D.bsl", 4,4,4);
  translate[0,1,1];
}

#endif // _checkers_bsdl3
