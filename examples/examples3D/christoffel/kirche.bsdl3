/*
 * kirche.bsdl3 
 *
 * Copyright (C) 1994-96, Bernhard Buehlmann <buehlmann@iam.unibe.ch>
 *                        University of Berne, Switzerland
 *
 * All rights reserved.
 *
 * This software may be freely copied, modified, and redistributed
 * provided that this copyright notice is preserved on all copies.
 *
 * You may not distribute this software, in whole or in part, as part of
 * any commercial product without the express consent of the authors.
 *
 * There is no warranty or other guarantee of fitness of this software
 * for any purpose.  It is provided solely "as is".
 *
 * -----------------------------------------------------------------------------
 *  $Id: kirche.bsdl3,v 1.1 1996/02/21 09:50:12 streit Exp $
 * -----------------------------------------------------------------------------
 */

const fenster_b .9;
const scheiben_h .9;

define scheibe list {
	box ([-fenster_b/2,0,-scheiben_h/2],[fenster_b/2,.001,scheiben_h/2]){glasDunkel;}

	cylinder (.02, [-fenster_b/2,0,scheiben_h/5],
			[fenster_b/2,0,scheiben_h/5]){sandstein;}

	cylinder (.02, [-fenster_b/2,0,-scheiben_h/5],
			[fenster_b/2,0,-scheiben_h/5]);

	cylinder (.02, [fenster_b/6,0,scheiben_h/2],
			[fenster_b/6,0,-scheiben_h/2]);
	cylinder (.02, [-fenster_b/6,0,scheiben_h/2],
			[-fenster_b/6,0,-scheiben_h/2]);
}

define fenster list {

	polygon ([-fenster_b,0,4], [0,0,4.8], [fenster_b,0,4], [fenster_b,0,8.5],
		[-fenster_b,0,8.5]) {translate [0,.05,0];sandstein;}

	cylinder (.05, [fenster_b,0,0], [fenster_b,0,4]){sandstein;}
	cylinder (.05, [-fenster_b,0,0], [-fenster_b,0,4]);

	cylinder (.05, [0,0,0], [0,0,5]);
	
	cylinder (.05, [-fenster_b,0,0], [fenster_b,0,0]);
	cylinder (.05, [-fenster_b,0,scheiben_h], [fenster_b,0,scheiben_h]);
	cylinder (.05, [-fenster_b,0,2*scheiben_h], [fenster_b,0,2*scheiben_h]);
	cylinder (.05, [-fenster_b,0,3*scheiben_h], [fenster_b,0,3*scheiben_h]);
	cylinder (.05, [-fenster_b,0,4*scheiben_h], [fenster_b,0,4*scheiben_h]);

	scheibe {translate [fenster_b/2, 0, scheiben_h/2];glasDunkel;}
	scheibe {translate [-fenster_b/2, 0, scheiben_h/2];glasDunkel;}

	scheibe {translate [fenster_b/2, 0, 3*scheiben_h/2];glasDunkel;}
	scheibe {translate [-fenster_b/2, 0, 3*scheiben_h/2];glasDunkel;}

	scheibe {translate [fenster_b/2, 0, 5*scheiben_h/2];glasDunkel;}
	scheibe {translate [-fenster_b/2, 0, 5*scheiben_h/2];glasDunkel;}

	scheibe {translate [fenster_b/2, 0, 7*scheiben_h/2];glasDunkel;}
	scheibe {translate [-fenster_b/2, 0, 7*scheiben_h/2];glasDunkel;}

	scheibe {translate [fenster_b/2, 0, 9*scheiben_h/2];glasDunkel;}
	scheibe {translate [-fenster_b/2, 0, 9*scheiben_h/2];glasDunkel;}
}

const e_b 3;

define pfosten list {
	cylinder (.2, [0,0,0], [0,0,1.4]) {sandstein;}
	sphere (.3, [0,0,.7]);	
}

define zaun list {
	box ([-e_b, -.3,0], [e_b,.7,.5]) {sandstein;}
	
	pfosten {translate [0,0,.5];}
	pfosten {translate [1,0,.5];}
	pfosten {translate [2,0,.5];}
	pfosten {translate [-1,0,.5];}
	pfosten {translate [-2,0,.5];}

	box ([-e_b, -.3,1.9], [e_b,.7,1.7]);
	box ([-e_b+.2, -.4,0], [-e_b,.8,1.7]);
	box ([e_b-.2, -.4,0], [e_b,.8,1.7]);


	pfosten{translate [e_b,0,1.7];}
} 

const o_t .9;
const o_l .8;
define ornament list {
// querbalken und kleine zylinder

	box ([-e_b,-.7,.14], [e_b,.9,1.2]) {sandstein;}

	cylinder (.07, [0,-o_l, 0], [0,o_l, 0]){close;}
	cylinder (.07, [.7,-o_l, 0], [.7,o_l, 0]){close;}
	cylinder (.07, [-.7,-o_l, 0], [-.7,o_l, 0]){close;}
	cylinder (.07, [1.4,-o_l, 0], [1.4,o_l, 0]){close;}
	cylinder (.07, [-1.4,-o_l, 0], [-1.4,o_l, 0]){close;}
	cylinder (.07, [2.1,-o_l, 0], [2.1,o_l, 0]){close;}
	cylinder (.07, [-2.1,-o_l, 0], [-2.1,o_l, 0]){close;}

}

define element list {
	box ([-e_b, -.3,0], [e_b,.7,1.7]) {sandsteinWeiss;rotateX(10);}
	box ([-e_b, -.2,1.7], [e_b,.2,3.5]) {sandstein;}

	box ([-e_b, -.2,3.5], [-fenster_b,.2,10]) {sandstein;}
	box ([e_b, -.2,3.5], [fenster_b,.2,10]) {sandstein;}
	
	box ([-e_b,-.3,1.7], [-e_b+.7,.3,10]) {sandstein;}
	box ([e_b,-.3,1.7], [e_b-.7,.3,10]) {sandstein;}

// saeule unten
	box ([-e_b, -.3,0], [-e_b+1,.9,1.7]) {sandsteinWeiss;rotateX(10);}
	box ([e_b, -.3,0], [e_b-1,.9,1.7]) {sandsteinWeiss;rotateX(10);}

//saeule mitte
	box ([-e_b,-.5,1.7], [-e_b+.3,.5,11]) {sandstein;}
	box ([e_b,-.5,1.7], [e_b-.3,.5,11]) {sandstein;}

//laengsbalken
	cylinder (.4, [-fenster_b-.5, 0, 3.5], [-fenster_b-.5, 0, 9.7]);
	cylinder (.4, [fenster_b+.5, 0, 3.5], [fenster_b+.5, 0, 9.7]);

// querbalken oben
	box ([-e_b, -.5, 9.7], [e_b, .5, 12]);


	ornament {translate [0,0,11];}
	

// fenster
	fenster {translate [0,0,3.5];}	

// zaun
	zaun {translate [0,0,12];}
}


define dreieck list {
	triangle ([-e_b, 0, 0], [0,0,1.8], [e_b, 0, 0]) {sandstein;}

	box ([-e_b, .9, 0], [e_b, 0, .1]);
	box ([0,.9,0], [e_b+.45, 0, .1]) {rotateY(30);translate [-e_b, 0, 0];}
	box ([0,.9,0], [-e_b-.45, 0, .1]) {rotateY(-30);translate [e_b, 0, 0];}

	cylinder (.1, [0,.2,1.8], [0,0,1.8]){close;}
}

define tor list {
	dreieck {translate [0,0,12.5];}

	box ([-e_b, -.3,0], [-e_b+1.4,.7,1.7]) {sandsteinWeiss;rotateX(10);}
	box ([e_b, -.3,0], [e_b-1.4,.7,1.7]) {sandsteinWeiss;rotateX(10);}

	box ([-e_b-.5, -.3,0], [-e_b+.7,1.6,1.7]) {sandsteinWeiss;rotateX(10);}
	box ([e_b+.5, -.3,0], [e_b-.7,1.6,1.7]) {sandsteinWeiss;rotateX(10);}


	box ([-e_b, -.3,1.7], [-e_b+1.4,.4,11]) {sandstein;}
	box ([e_b, -.3,1.7], [e_b-1.4,.4,11]) {sandstein;}
// zwei seitenbalken
	box ([-e_b-.45, -.3,1.7], [-e_b+.7,1,3.5]){sandstein;}
	box ([e_b+.45, -.3,1.7], [e_b-.7,1,3.5]){sandstein;}
// saeulen:
	cone (.7,[-e_b, .3,3.5], .4, [-e_b,.3,11]);
	cone (.7,[e_b, .3,3.5], .4, [e_b,.3,11]);


// querbalken oben

	box ([-e_b, .4, 6.7], [e_b, 0, 8]);
	box ([-e_b, .4, 9.6], [e_b, 0,12]);

// zaun:
//	zaun {translate [0,0,12];}
// treppe:

	box ([-e_b, 2, 0], [e_b, 0, .2]);
	box ([-e_b+.2, 1.8, .2], [e_b-.2, 0, .4]);
	box ([-e_b+.4, 1.6, .4], [e_b-.4, 0, .6]);
	box ([-e_b+.6, 1.4, .6], [e_b-.6, 0, .8]);

// tuere
	box ([-e_b+.7, .1, 0], [e_b-.7, 0, 8]) {darkGreen;}	
	box ([-.2, .15, 0], [.2, 0, 8]) {darkGreen;}	

// fenster

//	fenster {translate [0,0,7];}

}


// dach
// box innen
//box ([-7*e_b,-3*e_b,0],[7*e_b,3*e_b,14]);

define dach list {

box ([-7*e_b,-5.5*e_b,0],[7*e_b,0,.2]) {rotateX(45); 
				translate [0,0,25];dachRot;} 
box ([-7*e_b,5.5*e_b,0],[7*e_b,0,.2]) {rotateX(-45); 
				translate [0,0,25];dachRot;} 

cylinder (.4,[-7*e_b,0,25],[7*e_b,0,25]) {close;dachRot;}

triangle ([-7*e_b,4*e_b,13], [-7*e_b,-4*e_b,13],[-7*e_b,0,25]){sandstein;}
triangle ([7*e_b,4*e_b,13], [7*e_b,-4*e_b,13],[7*e_b,0,25]){sandstein;}

}
define stundenmarkierung list {
box ([-.08,.15, 1.4], [.08, 0, 1.7]) {gold;}
}

define zeiger list {
box ([-.08,.15, -.5], [.08, 0, 1.7]) {gold;}	
sphere (.2, [0, .4, 1.3]) {scale [1,.3,1];}
}

define zifferblatt list {
	cylinder (2, [0,0,0],[0,-.3,0]) {close;darkGreen2;}
	stundenmarkierung {rotateY(0);}
	stundenmarkierung {rotateY(30);}
	stundenmarkierung {rotateY(60);}
	stundenmarkierung {rotateY(90);}
	stundenmarkierung {rotateY(-30);}
	stundenmarkierung {rotateY(-60);}
	stundenmarkierung {rotateY(-90);}
	stundenmarkierung {rotateY(-120);}
	stundenmarkierung {rotateY(-150);}
	stundenmarkierung {rotateY(-180);}
	stundenmarkierung {rotateY(120);}
	stundenmarkierung {rotateY(150);}

//zeiger
	zeiger {rotateY(33);}
	zeiger {scale [.7,.7,.7]; rotateY(-40);}
}

define turmelement list {
	box ([-e_b, -.2,1.7], [e_b,.2,3.5]) {sandstein;}

	box ([-e_b, -.2,3.5], [-fenster_b,.2,10]) {sandstein;}
	box ([e_b, -.2,3.5], [fenster_b,.2,10]) {sandstein;}
	
	box ([-e_b,-.3,1.7], [-e_b+.7,.3,10]) {sandstein;}
	box ([e_b,-.3,1.7], [e_b-.7,.3,10]) {sandstein;}

	fenster {translate [0,0,3.5];}	

	zifferblatt {translate [0,.8,11];}
	dreieck {translate [0,0,13];}

}

define turm list {

turmelement {translate [0,e_b,0];};
turmelement {rotateZ(90); translate [-e_b,0,0];}
turmelement {rotateZ(-90); translate [e_b,0,0];}
turmelement {rotateZ(180); translate [0,-e_b,0];}

// block oben:

box ([-e_b-.3, -e_b-.3, 0], [e_b+.3, e_b+.3,5]) {translate [0,0,8];sandstein;}

	sphere (e_b, [0,0,14.5]) {darkGreen;}
	cone (2, [0,0,17], .1, [0,0,30]);
	sphere (.2, [0,0,30]);
}

define kirche list {
turm {translate [-5*e_b,0,20];}

dach;

// westseite


tor{translate [0,4*e_b,0];};
element {translate [-2*e_b,4*e_b,0];}
element {translate [-4*e_b,4*e_b,0];}
element {translate [-6*e_b,4*e_b,0];}

element {translate [2*e_b,4*e_b,0];}
element {translate [4*e_b,4*e_b,0];}
element {translate [6*e_b,4*e_b,0];}

// ostseite


tor{rotateZ(180); translate [0,-4*e_b,0];};
element {rotateZ(180);translate [-2*e_b,-4*e_b,0];}
element {rotateZ(180);translate [-4*e_b,-4*e_b,0];}
element {rotateZ(180);translate [-6*e_b,-4*e_b,0];}

element {rotateZ(180);translate [2*e_b,-4*e_b,0];}
element {rotateZ(180);translate [4*e_b,-4*e_b,0];}
element {rotateZ(180);translate [6*e_b,-4*e_b,0];}

// nordseite

element {rotateZ(270);translate [7*e_b,-3*e_b,0];}
element {rotateZ(270);translate [7*e_b,-1.5*e_b,0];}
tor {rotateZ(270);translate [7*e_b,0,0];}
element {rotateZ(270);translate [7*e_b,1.5*e_b,0];}
element {rotateZ(-90);translate [7*e_b,3*e_b,0];}

element {rotateZ(-90);translate [7*e_b,0,13];}

// suedseite

element {rotateZ(90);translate [-7*e_b,-3*e_b,0];}
element {rotateZ(90);translate [-7*e_b,-1.5*e_b,0];}
tor {rotateZ(90);translate [-7*e_b,0,0];}
element {rotateZ(90);translate [-7*e_b,1.5*e_b,0];}
element {rotateZ(90);translate [-7*e_b,3*e_b,0];}

element {rotateZ(90);translate [-7*e_b,0,13];}

}
