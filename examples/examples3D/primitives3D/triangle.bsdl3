/*
 * triangle.bsdl3 
 *
 * Copyright (C) 1994-96, Christoph Streit <streit@iam.unibe.ch>
 *                        Stephan Amann <amann@iam.unibe.ch>
 *                        University of Berne, Switzerland
 *
 * All rights reserved.
 *
 * This software may be freely copied, modified, and redistributed
 * provided that this copyright notice is preserved on all copies.
 *
 * You may not distribute this software, in whole or in part, as part of
 * any commercial product without the express consent of the authors.
 *
 * There is no warranty or other guarantee of fitness of this software
 * for any purpose.  It is provided solely "as is".
 *
 * -----------------------------------------------------------------------------
 *  $Id: triangle.bsdl3,v 1.6 1996/01/12 19:10:48 amann Exp $
 * -----------------------------------------------------------------------------
 */

#ifndef _triangle_bsdl3
#define _triangle_bsdl3

// We're in 3D Namespace:
using 3D;                

// _______________________________________________________________________ scene

// We need a camera
camera {
  perspective {
    eye [0,0,60];               // Eye position
    lookat [0,0,0];             // Looking to this point
    up [0,1,0];                 // What direction is up? (y)
    fov 12;                  // Field of view: horizontal, vertical
    resolution (600, 300);      // Screen resolution
    eyesep 1;                   // For stereo images ...
  }
  background [.2,.2,.2];      // Color of Background
}

// We need a light
pointLight (1, [1,1,1]) {    // Point light with intensity 1 
                             // and color [1,1,1] (white)
  position [0,0,100];
}

// Texture for object
define triangleColor checker {
  even {
    phong {
      ambient [.1,.1,.3];
      diffuse [.3,.3,1];
    }
  }
  odd {
    phong {
      ambient [.2,.1,.2];
      diffuse [.9,.2,.9];
      specular [.4,.2,.4];
      specpow 20;
    }
  }
  scale [.2,.2,.2];
}

// _________________________________________________________________no normals

// upper left: no transformation
triangle ([-6,.5,0.1], [-3.5,1.5,0.1], [-4.5,2.8,0]) {
  triangleColor;
}

// upper right: translation
triangle ([-6,.5,0.1], [-3.5,1.5,0.1], [-4.5,2.8,0.1]) {
  translate [3,0,0];
  triangleColor;
}

// lower left: scale + translate
triangle ([-6,.5,0.1], [-3.5,1.5,0.1], [-4.5,2.8,0.1]) {
  triangleColor;
  scale [.5,1,1];
  translate [-2.5,-3,0];
}

// lower right: rotate + translate
triangle ([-6,.5,0.1], [-3.5,1.5,0.1], [-4.5,2.8,0.1]) {
  triangleColor;
  rotate (45, [.5,.5,.5]);
  translate [2.5,0,0];
}

// _______________________________________________________________with normals

// upper left: no transformation
triangle ([0,.5,0.1], [0,0,1],
          [2.5,1.5,0.1], [0,0,1],
          [1.5,2.8,0.1], [0,0,1]) {
  triangleColor;
}

// upper right: translation
triangle ([0,.5,0.1], [0,0,1],
          [2.5,1.5,0.1], [0,0,1],
          [1.5,2.8,0.1], [0,0,1]) {
  translate [3,0,0];
  triangleColor;
}

// lower left: scale + translate
triangle ([0,.5,0.1], [0,0,1],
          [2.5,1.5,0.1], [0,0,1],
          [1.5,2.8,0.1], [0,0,1]) {
  triangleColor;
  scale [.5,1,1];
  translate [.5,-3,0];
}

// lower right: rotate + translate
triangle ([0,.5,0.1], [0,0,1],
          [2.5,1.5,0.1], [0,0,1],
          [1.5,2.8,0.1], [0,0,1]) {
  triangleColor;
  rotate (45, [.5,.5,.5]);
  translate [4,-3,0];
}

#endif // _triangle_bsdl3
