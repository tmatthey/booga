/*
 * MergeRenderer.bsdl3
 *
 * Shows possible configuration of a merge renderer.
 *
 * Copyright (C) 1994-96, Christoph Streit <streit@iam.unibe.ch>
 *                        Stephan Amann <amann@iam.unibe.ch>
 *                        University of Berne, Switzerland
 *
 * All rights reserved.
 *
 * This software may be freely copied, modified, and redistributed
 * provided that this copyright notice is preserved on all copies.
 *
 * You may not distribute this software, in whole or in part, as part of
 * any commercial product without the express consent of the authors.
 *
 * There is no warranty or other guarantee of fitness of this software
 * for any purpose.  It is provided solely "as is".
 *
 * -----------------------------------------------------------------------------
 *  $Id: MergeRenderer.bsdl3,v 1.3 1996/06/06 08:23:55 streit Exp $
 * -----------------------------------------------------------------------------
 */

#include "BOOGALegos.bsdl3"

using 3D;

const distance   BOOGALegos::legoH+1;
const tbDistance BOOGALegos::tbH+1;

camera {
  perspective {
    eye [2,-18,50];             // Eye position
    lookat [10,13.5,0];         // Looking to this point
    up [0,1,0];                 // What direction is up? (y)
    resolution (600, 600);      // Screen resolution
  }
  background [1,1,1];        // Color of Background
}
 
pointLight (.5, [1,1,1]) { position [ 100,-100, 100]; }
pointLight (.5, [1,1,1]) { position [-100, 100, 100]; }
pointLight (.5, [1,1,1]) { position [ 100, 100,-100]; }
pointLight (.5, [1,1,1]) { position [-100,-100,-100]; }

pointLight (1, [1,1,1]) { position [11,0, 500]; }
pointLight (1, [1,1,1]) { position [11,0,-500]; }

define legoColor phong {
  diffuse  [.1,.3,.1];
}

define textColor phong {
  ambient [.5,.5,.5];
  diffuse [1,1,1];
}


/*
 * The merge renderer
 */
define MergeRenderer list {

  // Display
  BOOGALegos::bottom2D { 
    3D::translate [BOOGALegos::lego2W/4, -3D::tbDistance, 0]; 
  } 
  BOOGALegos::_2Dto2D { 
    3D::translate [BOOGALegos::lego2W/4, 0, 0]; 
  } 
  caption ("Display", textColor, BOOGALegos::lego2W/4+1.3, 0);

  // Rasterize
  BOOGALegos::_2Dto2D { 
    3D::translate [BOOGALegos::lego2W/4, 3D::distance, 0]; 
  } 
  caption ("Rasterize", textColor, BOOGALegos::lego2W/4+.4, 3D::distance);

  // Merge
  BOOGALegos::merge2D {
    3D::translate [0, 2*3D::distance, 0];
  }
  caption ("Merge", textColor, 7.5, 2*3D::distance);
  
  // Renderer 1
  BOOGALegos::_3Dto2D_right {
    3D::translate [-BOOGALegos::legoW-BOOGALegos::gap, 3*3D::distance,0];
  }
  caption ("Renderer1", textColor, 
           -BOOGALegos::legoW-BOOGALegos::gap+6.5, 3*3D::distance);
  BOOGALegos::bottom3D { 
    3D::translate [-BOOGALegos::legoW-BOOGALegos::gap, 
                   3*3D::distance-3D::tbDistance, 
                   0]; 
  }

  // Renderer 2
  BOOGALegos::_3Dto2D_right {
    3D::scale [-1,1,1];
    3D::translate [BOOGALegos::lego2W+BOOGALegos::legoW+BOOGALegos::gap, 3*3D::distance,0];
  }
  caption ("Renderer2", textColor, 
           BOOGALegos::legoW+BOOGALegos::gap+6.5, 3*3D::distance);
  BOOGALegos::bottom3D { 
    3D::translate [BOOGALegos::lego2W+BOOGALegos::gap, 
                   3*3D::distance-3D::tbDistance, 
                   0]; 
  }

  // Split
  BOOGALegos::copy3D { 
    3D::translate [0, 4*3D::distance, 0]; 
  }
  caption ("Split", textColor, 8.5, 4*3D::distance);

  // Parser
  BOOGALegos::_3Dto3D { 
    3D::translate [BOOGALegos::lego2W/4, 5*3D::distance, 0]; 
  }
  caption ("Parser", textColor, BOOGALegos::lego2W/4+1.8, 5*3D::distance);
  BOOGALegos::top3D { 
    3D::translate [BOOGALegos::lego2W/4, 5*3D::distance+3D::tbDistance, 0]; 
  }
}

MergeRenderer { legoColor; translate [0,-2,0]; }


