/*
 * wireframe.bsdl3
 *
 * Shows possible configuration of wireframe renderer.
 *
 * Copyright (C) 1994-96, Christoph Streit <streit@iam.unibe.ch>
 *                        Stephan Amann <amann@iam.unibe.ch>
 *                        University of Berne, Switzerland
 *
 * All rights reserved.
 *
 * This software may be freely copied, modified, and redistributed
 * provided that this copyright notice is preserved on all copies.
 *
 * You may not distribute this software, in whole or in part, as part of
 * any commercial product without the express consent of the authors.
 *
 * There is no warranty or other guarantee of fitness of this software
 * for any purpose.  It is provided solely "as is".
 *
 * -----------------------------------------------------------------------------
 *  $Id: wireframe.bsdl3,v 1.7 1996/06/06 08:23:55 streit Exp $
 * -----------------------------------------------------------------------------
 */

#include "BOOGALegos.bsdl3"

using 3D;

const distance BOOGALegos::legoH+1;
const tbDistance BOOGALegos::tbH+1;

camera {
  perspective {
    eye    [1.5*BOOGALegos::legoW+BOOGALegos::gap+22,
            distance-5,
            35];                // Eye position
    lookat [1.5*BOOGALegos::legoW+BOOGALegos::gap+2.5,
            distance,
            0];                 // Looking to this point
    up [0,1,0];                 // What direction is up? (y)
    resolution (600, 600);      // Screen resolution
  }
  background [.5,.5,.5];        // Color of Background
}
 
pointLight (.5, [1,1,1]) { position [ 100,-100, 100]; }
pointLight (.5, [1,1,1]) { position [-100, 100, 100]; }
pointLight (.5, [1,1,1]) { position [ 100, 100,-100]; }
pointLight (.5, [1,1,1]) { position [-100,-100,-100]; }

pointLight (1, [1,1,1]) { position [11,0, 500]; }
pointLight (1, [1,1,1]) { position [11,0,-500]; }

define legoColor phong {
  diffuse  [.1,.3,.1];
}

define textColor phong {
  ambient [.5,.5,.5];
  diffuse [1,1,1];
}


/*
 * The wireframe renderer
 */

define wireframe list {
  
  // PostScript
  BOOGALegos::bottom2D {
    3D::translate [BOOGALegos::legoW+BOOGALegos::gap, -3D::tbDistance, 0]; 
  }
  BOOGALegos::_2Dto2D { 
    3D::translate [BOOGALegos::legoW+BOOGALegos::gap, 0, 0]; 
  } 
  caption ("PostScript", textColor, BOOGALegos::legoW+BOOGALegos::gap+.2, 0);

  // Display
  BOOGALegos::bottom2D {
    3D::translate [BOOGALegos::lego2W+BOOGALegos::gap, -3D::tbDistance, 0]; 
  }
  BOOGALegos::_2Dto2D { 
    3D::translate [BOOGALegos::lego2W+BOOGALegos::gap, 0, 0]; 
  } 
  caption ("Display", textColor, BOOGALegos::lego2W+BOOGALegos::gap+1.3, 0);

  
  // Rasterize
  BOOGALegos::generate2D { 
    3D::translate [BOOGALegos::legoW+BOOGALegos::gap, 3D::distance, 0]; 
  } 
  caption ("Rasterize", textColor, BOOGALegos::legoW+BOOGALegos::gap+6.7, 3D::distance);

  // Wireframe
  BOOGALegos::bottom3D {
    3D::translate [0, 2*3D::distance-3D::tbDistance, 0]; 
  }
  BOOGALegos::_3Dto2D { 
    3D::translate [0, 2*3D::distance, 0]; 
  }
  caption ("Wireframe", textColor, 6.7, 2*3D::distance);

  // Parser
  BOOGALegos::_3Dto3D { 
    3D::translate [0, 3*3D::distance, 0]; 
  }
  caption ("Parser", textColor, 1.8, 3*3D::distance);
  BOOGALegos::top3D {
    3D::translate [0, 3*3D::distance+3D::tbDistance, 0]; 
  }
}

wireframe { legoColor; translate [0,-2,0]; }


