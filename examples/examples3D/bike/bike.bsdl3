/*
 * bike.bsdl3 
 *
 * Copyright (C) 1995, Bernhard Buehlmann <buehlmann@iam.unibe.ch>
 *                     University of Berne, Switzerland
 *
 * All rights reserved.
 *
 * This software may be freely copied, modified, and redistributed
 * provided that this copyright notice is preserved on all copies.
 *
 * You may not distribute this software, in whole or in part, as part of
 * any commercial product without the express consent of the authors.
 *
 * There is no warranty or other guarantee of fitness of this software
 * for any purpose.  It is provided solely "as is".
 *
 * -----------------------------------------------------------------------------
 *  $Id: bike.bsdl3,v 1.5 1996/08/29 14:17:22 buhlmann Exp $
 * -----------------------------------------------------------------------------
 */

#ifndef _bike_bsdl3
#define _bike_bsdl3
 
#include "viewing.bsdl3"
#include "material.bsdl3"
#include "zahnrad.bsdl3"
#include "kurbel.bsdl3" 
#include "bremse.bsdl3"
#include "rad.bsdl3"

//
//  Some constants
// -----------------------------------------------------------------------------
define bikeColor rot;

const front_wheel [2.05, 0, .1];  // offsets
const back_wheel  [-1.7, 0, .1];
const rahmen_r    .1;             // radius of frame

const f_p1 [1.5,0,1.7];
const f_p2 [-.4,0,1.3];
const f_p4 back_wheel + ([0,0,0]-back_wheel)*.8;
const f_p5 f_p2 + (back_wheel-f_p2)*.2;

const rahmen_naben_b naben_breite+[0,.05,0];
const gabel_angle 20;

//
//  The frame of the bike
// -----------------------------------------------------------------------------
define ramen grid [3,1,3] {
  cylinder (rahmen_r, [0,0,0], f_p1); 
  cylinder (rahmen_r, [0,0,0], f_p2);
  cylinder (rahmen_r, f_p1, f_p2);

  cylinder (rahmen_r/2, f_p4+rahmen_naben_b, back_wheel+rahmen_naben_b);
  cylinder (rahmen_r/2, f_p4-rahmen_naben_b, back_wheel-rahmen_naben_b);
  cylinder (rahmen_r/2, f_p4+rahmen_naben_b, [0,0,0]);
  sphere (rahmen_r+.01, f_p2);
  cylinder (rahmen_r/2, f_p4-rahmen_naben_b, [0,0,0]);
  sphere (rahmen_r/2, f_p4-rahmen_naben_b);
  sphere (rahmen_r/2, f_p4+rahmen_naben_b);

  cylinder (rahmen_r/2, f_p5+rahmen_naben_b, back_wheel+rahmen_naben_b);
  cylinder (rahmen_r/2, f_p5-rahmen_naben_b, back_wheel-rahmen_naben_b);
  cylinder (rahmen_r/2, f_p5+rahmen_naben_b, f_p2);
  cylinder (rahmen_r/2, f_p5-rahmen_naben_b, f_p2);
  sphere (rahmen_r/2, f_p5-rahmen_naben_b);
  sphere (rahmen_r/2, f_p5+rahmen_naben_b);

  sphere (rahmen_r, f_p1);
  sphere (rahmen_r, back_wheel+rahmen_naben_b);
  sphere (rahmen_r, back_wheel-rahmen_naben_b);

  //
  // der vorbau: winkel muss identisch mit winkel der gabel sein 
  cylinder (rahmen_r+.005, [0,0,-.15], [0,0,.1]) {
    rotateY gabel_angle;
    translate f_p1;
  }

  //
  // das tretlager: 
  cylinder (.1, [0,-.27,0], [0,.27,0]){close;}
}

//
//  Der Sattel
// -----------------------------------------------------------------------------
define sattel grid [2,2,2] {
  pneu;
  cylinder (.12, [-.3,0,0], [.3,0,0]) {
    close;
    scale [1,1,.3];
    pneu;
  }
  cylinder (.1, [-.15,0,-.1], [.15,0,-.1]) {
    close;
    scale [1,.7,.3];
    pneu;
  }
  sphere (.1,[.19,0,-.1]) { scale [1,1,.3]; pneu;}
  sphere (.12,[.3,0,0])  { scale [1,1,.3]; pneu;}
  sphere (.22,[-.2,0,0]) { scale [1,1.1,.2]; pneu;}

  cylinder (rahmen_r-.04, -0.7*f_p2, [0,0,0]) { braun; }
}

//
//  Der Lenker
// -----------------------------------------------------------------------------
const lenker_r .05;
const vorbau [.3,0,0];
const lenker_b [0,.7,0];
const bar_end [.4,0,0];
define lenker grid [3,1,3] {
  sphere (lenker_r, [0,0,0]);
  cylinder (lenker_r, [0,0,0], vorbau) { metall; };
  cylinder (lenker_r, vorbau, vorbau+lenker_b) { metall; };
  sphere (lenker_r, vorbau-lenker_b) { metall; };
  sphere (lenker_r, vorbau+lenker_b) { metall; };

  cylinder (lenker_r, vorbau, vorbau-lenker_b) { metall; }

  cylinder (lenker_r, vorbau-lenker_b, vorbau-lenker_b+bar_end) { metall; }
  sphere (lenker_r, vorbau-lenker_b+bar_end) { metall; }
  cylinder (lenker_r, vorbau-lenker_b+bar_end,
            vorbau-lenker_b+bar_end+[.1,.1,0]){close; metall;}
  sphere (lenker_r, vorbau+lenker_b+bar_end);
  cylinder (lenker_r, vorbau+lenker_b, vorbau+lenker_b+bar_end)  {metall; }
  cylinder (lenker_r, vorbau+lenker_b+bar_end, 
            vorbau+lenker_b+bar_end+[.1,-.1,0]){close; metall;}
	
  //
  // die griffe: 
  cylinder (lenker_r+.01, vorbau+(lenker_b*.5), vorbau+(lenker_b*.9)) {
    close; 
    pneu;
  }
  cylinder (lenker_r+.01, vorbau-(lenker_b*.5),
		vorbau-(lenker_b*.9)) { close; pneu;}
}

//
//  Die Gabel
// -----------------------------------------------------------------------------
const gabel_size [0,0,1.3];
const gabel_r .06;
const gabel_join [0,0,1.4];
const gabel_top [0,0,1.9];
define gabel grid [4,1,4] {
  metall;
  sphere (gabel_r, rahmen_naben_b) {metall_s;}
  sphere (gabel_r, -rahmen_naben_b);

  cylinder (gabel_r, rahmen_naben_b, gabel_size+rahmen_naben_b); 
  cylinder (gabel_r, -rahmen_naben_b, gabel_size-rahmen_naben_b);

  sphere (gabel_r, gabel_size+rahmen_naben_b);
  sphere (gabel_r, gabel_size-rahmen_naben_b);

  cylinder (gabel_r, gabel_size-rahmen_naben_b, gabel_join);
  cylinder (gabel_r, gabel_size+rahmen_naben_b, gabel_join);
  cylinder (gabel_r, gabel_join, gabel_top);

  // die bremsen:
  cylinder (gabel_r/3, rahmen_naben_b+(gabel_join*.78), 
            rahmen_naben_b+(gabel_join*.78)+[.1,0,0]) {
    close;
    metall_s;
  }
  cylinder (gabel_r/3, -rahmen_naben_b+(gabel_join*.78), 
            -rahmen_naben_b+(gabel_join*.78)+[.1,0,0]) {
    close;
    metall_s;
  }

  bremse { scale [.4,.4,.4]; translate  rahmen_naben_b+(gabel_join*.78)+[.1,0,0];}
  bremse { scale [.4,-.4,.4]; translate  -rahmen_naben_b+(gabel_join*.78)+[.1,0,0];}
}

//
//  Das Velo
// -----------------------------------------------------------------------------
define theBike grid [3,3,3] {
  ramen  { bikeColor; }
  sattel { translate f_p2*1.7; }
  gabel {
    rotateY gabel_angle;
    translate front_wheel;
  }
  lenker {
    translate gabel_top;
    rotateY gabel_angle;
    translate front_wheel;
  }
  rad {
    rotateY gabel_angle;
    translate front_wheel;
  }
  rad {
    translate back_wheel;
  }
  zahnrad { 
    scale [.8,.8,.8]; 
    rotateX (90); 
    translate [0,-.3,0];
  } 
  pedale {
    rotateY (40);
  }
}

//
// THE BIKE instance
//
theBike;

define mirror whitted { diffuse [1,1,1]; reflectivity .9; }
polygon ([-4,-4,-1.2],[4,-4,-1.2],[4,4,-1.2],[-4,4,-1.2]) { mirror; }

#endif // _bike_bsdl3
