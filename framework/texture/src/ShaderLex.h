#ifndef FLEX_HEADER_ShaderLex_h
#define FLEX_HEADER_ShaderLex_h
#define YY_ShaderLex_CHAR char
#line 1 "/usr/local/lib/flexskel.h"
/* A lexical scanner header generated by flex */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */


/*********************************************/
/* SYSTEM dependent declaration, includes... */
/*********************************************/
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
#ifdef __cplusplus
#ifndef YY_USE_PROTOS
#define YY_USE_PROTOS
#endif
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#else	/* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#else
#endif	/* __GNUC__ */
#ifndef YY_USE_PROTOS
#define YY_USE_PROTOS
#endif
#endif	/* __STDC__ */
#endif	/* ! __cplusplus */
/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif
#include <stdio.h>




/* % here is the declaration from section1 %header{  */ 
#line 26 "/home/fcg/BOOGA/workspaces/core-dev/shared_src/framework/texture/src/ShaderLex.l"
#include "ShaderYacc.h"
#include "booga/texture/ShaderNode.h"
#line 30 "/home/fcg/BOOGA/workspaces/core-dev/shared_src/framework/texture/src/ShaderLex.l"
#define YY_ShaderLex_MEMBERS                                                   \
  public:                                                        \
    void setParseFile(FILE* parseFile) {yyin = parseFile;}       \
    const char* getToken() { return yytext;}                     \
    int getLineNo() {return myLineNo;}                           \
  private:                                                       \
    int myLineNo;                                                \

#line 38 "/home/fcg/BOOGA/workspaces/core-dev/shared_src/framework/texture/src/ShaderLex.l"
#define YY_ShaderLex_LEX  scan
#line 39 "/home/fcg/BOOGA/workspaces/core-dev/shared_src/framework/texture/src/ShaderLex.l"
#define YY_ShaderLex_LEX_PARAM  YY_ShaderYacc_STYPE& yylval
#line 40 "/home/fcg/BOOGA/workspaces/core-dev/shared_src/framework/texture/src/ShaderLex.l"
#define YY_ShaderLex_CONSTRUCTOR_INIT  : myLineNo(1)
#line 49 "/home/fcg/BOOGA/workspaces/core-dev/shared_src/framework/texture/src/ShaderLex.l"
#line 52 "/usr/local/lib/flexskel.h"

#ifdef YY_USE_CLASS
#ifdef YY_ShaderLex_IOSTREAM
#include <iostream.h>
#define YY_ShaderLex_IFILE  istream
#define YY_ShaderLex_OFILE ostream 
#define YY_ShaderLex_ERRFILE cerr

#ifndef YY_ShaderLex_IFILE_DEFAULT
#define YY_ShaderLex_IFILE_DEFAULT &cin
#endif

#ifndef YY_ShaderLex_OFILE_DEFAULT
#define YY_ShaderLex_OFILE_DEFAULT &cout
#endif

#endif
#endif

#ifndef YY_ShaderLex_IFILE
#define YY_ShaderLex_IFILE FILE 
#endif

#ifndef YY_ShaderLex_OFILE
#define YY_ShaderLex_OFILE FILE 
#endif

#ifndef YY_ShaderLex_ERRFILE
#define YY_ShaderLex_ERRFILE stderr
#endif

#ifndef YY_ShaderLex_IFILE_DEFAULT
#define YY_ShaderLex_IFILE_DEFAULT stdin
#endif

#ifndef YY_ShaderLex_OFILE_DEFAULT
#define YY_ShaderLex_OFILE_DEFAULT stdout
#endif




#ifndef YY_ShaderLex_TEXT
#define YY_ShaderLex_TEXT yytext
#endif
#ifndef YY_ShaderLex_LENG
#define YY_ShaderLex_LENG yyleng
#endif
#ifndef YY_ShaderLex_IN
#define YY_ShaderLex_IN yyin
#endif
#ifndef YY_ShaderLex_OUT
#define YY_ShaderLex_OUT yyout
#endif

#ifndef YY_ShaderLex_LEX_RETURN
#define YY_ShaderLex_LEX_RETURN int
#else
#ifndef YY_ShaderLex_LEX_DEFINED
#define YY_ShaderLex_LEX_DEFINED 
#endif
#endif

#ifndef YY_ShaderLex_LEX
#define YY_ShaderLex_LEX yylex
#else
#ifndef YY_ShaderLex_LEX_DEFINED
#define YY_ShaderLex_LEX_DEFINED 
#endif
#endif

#ifndef YY_ShaderLex_LEX_PARAM
#ifndef YY_USE_PROTOS
#define YY_ShaderLex_LEX_PARAM 
#else
#define YY_ShaderLex_LEX_PARAM void
#endif
#else
#ifndef YY_ShaderLex_LEX_DEFINED
#define YY_ShaderLex_LEX_DEFINED 
#endif
#endif

#ifndef YY_ShaderLex_LEX_PARAM_DEF
#define YY_ShaderLex_LEX_PARAM_DEF
#else
#ifndef YY_ShaderLex_LEX_DEFINED
#define YY_ShaderLex_LEX_DEFINED 
#endif
#endif

#ifndef YY_ShaderLex_RESTART
#define YY_ShaderLex_RESTART yyrestart
#endif
#ifndef YY_ShaderLex_SWITCH_TO_BUFFER
#define YY_ShaderLex_SWITCH_TO_BUFFER yy_switch_to_buffer
#endif
#ifndef YY_ShaderLex_LOAD_BUFFER_STATE
#define YY_ShaderLex_LOAD_BUFFER_STATE yy_load_buffer_state
#endif

#ifndef YY_ShaderLex_CREATE_BUFFER
#define YY_ShaderLex_CREATE_BUFFER yy_create_buffer
#ifndef YY_USE_CLASS
#ifndef yy_new_buffer
#define yy_new_buffer yy_create_buffer
#endif
#endif
#endif
#ifndef YY_ShaderLex_DELETE_BUFFER
#define YY_ShaderLex_DELETE_BUFFER yy_delete_buffer
#endif
#ifndef YY_ShaderLex_INIT_BUFFER
#define YY_ShaderLex_INIT_BUFFER yy_init_buffer
#endif



#ifdef YY_ShaderLex_FLEX_DEBUG
#ifndef YY_ShaderLex_DEBUG
#define YY_ShaderLex_DEBUG 1
#endif
#else
#ifndef YY_ShaderLex_DEBUG
#define YY_ShaderLex_DEBUG 0
#endif
#endif

#if YY_ShaderLex_DEBUG != 0
#ifndef YY_ShaderLex_DEBUG_FLAG
#define YY_ShaderLex_DEBUG_FLAG yy_flex_debug
#endif
#ifndef YY_ShaderLex_DEBUG_INIT
#define YY_ShaderLex_DEBUG_INIT 1
#endif
#endif




#ifndef YY_USE_CLASS
#ifndef YY_ShaderLex_CURRENT_BUFFER
#define YY_ShaderLex_CURRENT_BUFFER yy_current_buffer
#endif
typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern void YY_ShaderLex_RESTART YY_PROTO(( YY_ShaderLex_IFILE *input_file ));
extern void YY_ShaderLex_SWITCH_TO_BUFFER YY_PROTO(( YY_BUFFER_STATE new_buffer ));
extern void YY_ShaderLex_LOAD_BUFFER_STATE YY_PROTO(( void ));
extern YY_BUFFER_STATE YY_ShaderLex_CREATE_BUFFER YY_PROTO(( YY_ShaderLex_IFILE *file, int size ));
extern void YY_ShaderLex_DELETE_BUFFER YY_PROTO(( YY_BUFFER_STATE b ));
extern void YY_ShaderLex_INIT_BUFFER YY_PROTO(( YY_BUFFER_STATE b, YY_ShaderLex_IFILE *file ));

#if YY_ShaderLex_DEBUG != 0
extern int YY_ShaderLex_DEBUG_FLAG ;
#endif
extern YY_ShaderLex_CHAR  *YY_ShaderLex_TEXT;
extern int YY_ShaderLex_LENG;
extern YY_ShaderLex_IFILE *YY_ShaderLex_IN;
extern YY_ShaderLex_OFILE *YY_ShaderLex_OUT;
#ifdef YY_ShaderLex_LEX_DEFINED
extern YY_ShaderLex_LEX_RETURN YY_ShaderLex_LEX ( YY_ShaderLex_LEX_PARAM )
YY_ShaderLex_LEX_PARAM_DEF
#else
#ifndef YY_DECL
extern YY_ShaderLex_LEX_RETURN YY_ShaderLex_LEX ( YY_ShaderLex_LEX_PARAM )
YY_ShaderLex_LEX_PARAM_DEF
#else
/* no declaration if oldstyle flex */
#endif
#endif
#else

#ifndef YY_ShaderLex_CURRENT_BUFFER
#define YY_ShaderLex_CURRENT_BUFFER YY_CURRENT_BUFFER
#endif
#ifndef YY_ShaderLex_CLASS
#define YY_ShaderLex_CLASS ShaderLex
#endif
#ifndef YY_ShaderLex_ECHO
#define YY_ShaderLex_ECHO yy_echo
#endif
#ifdef YY_ShaderLex_ECHO_PURE
#define YY_ShaderLex_ECHO_NOCODE
#endif

#ifndef YY_ShaderLex_ECHO_CODE
#ifndef YY_ShaderLex_IOSTREAM
#define YY_ShaderLex_ECHO_CODE fwrite( (char *) YY_ShaderLex_TEXT, YY_ShaderLex_LENG, 1, YY_ShaderLex_OUT );
#else
#define YY_ShaderLex_ECHO_CODE (YY_ShaderLex_OUT->write( (char *) YY_ShaderLex_TEXT, YY_ShaderLex_LENG));
#endif
#endif

#ifndef YY_ShaderLex_INPUT
#define YY_ShaderLex_INPUT yy_input
#endif
#ifdef YY_ShaderLex_INPUT_PURE
#define YY_ShaderLex_INPUT_NOCODE
#endif

#ifndef YY_ShaderLex_INPUT_CODE
#ifndef YY_ShaderLex_IOSTREAM
#define YY_ShaderLex_INPUT_CODE return result= fread(  buffer, 1,max_size,YY_ShaderLex_IN );
#else
#define YY_ShaderLex_INPUT_CODE if(YY_ShaderLex_IN->eof())  result=0;else {YY_ShaderLex_IN->read(buffer,max_size);result=YY_ShaderLex_IN->gcount();YY_ShaderLex_IN->clear(YY_ShaderLex_IN->rdstate()&(~ios::failbit));if(YY_ShaderLex_IN->bad()) result= -1;} return result;
#endif
#endif

#ifdef YY_ShaderLex_FATAL_ERROR_PURE
#define YY_ShaderLex_FATAL_ERRO_NOCODE
#endif
#ifndef YY_ShaderLex_FATAL_ERROR
#define YY_ShaderLex_FATAL_ERROR yy_fatal_error
#endif

#ifndef YY_ShaderLex_FATAL_ERROR_CODE
#ifndef YY_ShaderLex_IOSTREAM
#define YY_ShaderLex_FATAL_ERROR_CODE fputs( msg, YY_ShaderLex_ERRFILE );putc( '\n', YY_ShaderLex_ERRFILE );exit( 1 );
#else
#define YY_ShaderLex_FATAL_ERROR_CODE YY_ShaderLex_ERRFILE<< msg <<endl;exit( 1 );
#endif
#endif

#ifndef YY_ShaderLex_WRAP
#define YY_ShaderLex_WRAP yy_wrap
#endif
#ifdef YY_ShaderLex_WRAP_PURE
#define YY_ShaderLex_WRAP_NOCODE
#endif
#ifndef YY_ShaderLex_WRAP_CODE
#define YY_ShaderLex_WRAP_CODE return 1;
#endif


#ifndef YY_ShaderLex_INHERIT
#define YY_ShaderLex_INHERIT
#endif
#ifndef YY_ShaderLex_MEMBERS
#define YY_ShaderLex_MEMBERS 
#endif
#ifndef YY_ShaderLex_CONSTRUCTOR_PARAM
#define YY_ShaderLex_CONSTRUCTOR_PARAM
#endif
#ifndef YY_ShaderLex_CONSTRUCTOR_CODE
#define YY_ShaderLex_CONSTRUCTOR_CODE
#endif
#ifndef YY_ShaderLex_CONSTRUCTOR_INIT
#define YY_ShaderLex_CONSTRUCTOR_INIT
#endif
#ifndef YY_ShaderLex_DESTRUCTOR_CODE
#define YY_ShaderLex_DESTRUCTOR_CODE
#endif
typedef struct yy_buffer_state *YY_BUFFER_STATE;

class YY_ShaderLex_CLASS YY_ShaderLex_INHERIT
{
 private:/* data */
 YY_ShaderLex_CHAR  *yy_c_buf_p;
 YY_ShaderLex_CHAR  yy_hold_char;
 int yy_n_chars;
 int yy_init;
 int yy_start;
 int yy_did_buffer_switch_on_eof;
 private: /* functions */
 void yy_initialize();
 int input();
 int yyinput() {return input();};
 int yy_get_next_buffer();
 void yyunput( YY_ShaderLex_CHAR  c, YY_ShaderLex_CHAR  *buf_ptr );
 /* use long instead of yy_state_type because it is undef */
 long yy_get_previous_state_ ( void );
 long yy_try_NUL_trans_  ( long current_state_ );
 protected:/* non virtual */
 YY_BUFFER_STATE YY_ShaderLex_CURRENT_BUFFER;
 void YY_ShaderLex_RESTART ( YY_ShaderLex_IFILE *input_file );
 void YY_ShaderLex_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer );
 void YY_ShaderLex_LOAD_BUFFER_STATE( void );
 YY_BUFFER_STATE YY_ShaderLex_CREATE_BUFFER( YY_ShaderLex_IFILE *file, int size );
 void YY_ShaderLex_DELETE_BUFFER( YY_BUFFER_STATE b );
 void YY_ShaderLex_INIT_BUFFER( YY_BUFFER_STATE b, YY_ShaderLex_IFILE *file );
 protected: /* virtual */
 virtual void YY_ShaderLex_ECHO()
#ifdef YY_ShaderLex_ECHO_PURE
  =0
#endif
  ;
 virtual int  YY_ShaderLex_INPUT(char  *buf,int &result,int max_size)
#ifdef YY_ShaderLex_INPUT_PURE
  =0
#endif
  ;
 virtual void  YY_ShaderLex_FATAL_ERROR(char *msg)
#ifdef YY_ShaderLex_FATAL_ERROR_PURE
  =0
#endif
  ;
 virtual int  YY_ShaderLex_WRAP()
#ifdef YY_ShaderLex_WRAP_PURE
  =0
#endif
  ;
 public:
 YY_ShaderLex_CHAR  *YY_ShaderLex_TEXT;
 int YY_ShaderLex_LENG;
 YY_ShaderLex_IFILE *YY_ShaderLex_IN;
 YY_ShaderLex_OFILE *YY_ShaderLex_OUT;
 YY_ShaderLex_LEX_RETURN YY_ShaderLex_LEX ( YY_ShaderLex_LEX_PARAM);
 YY_ShaderLex_CLASS(YY_ShaderLex_CONSTRUCTOR_PARAM) ;
 virtual ~YY_ShaderLex_CLASS() ;
#if YY_ShaderLex_DEBUG != 0
 int YY_ShaderLex_DEBUG_FLAG;
#endif
 public: /* added members */
 YY_ShaderLex_MEMBERS 
};
#endif



/* declaration of externs for public use of yylex scanner */

/* % here is the declaration from section2 %header{ */ 
#line 130 "/home/fcg/BOOGA/workspaces/core-dev/shared_src/framework/texture/src/ShaderLex.l"
#endif
#line 375 "/usr/local/lib/flexskel.h"

/* end of generated header */
